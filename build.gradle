buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }

        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.11.1"
        classpath "org.grails.plugins:hibernate5:6.0.0"

        classpath 'com.bmuschko:gradle-clover-plugin:2.1.1'
    }
}

version "0.1"
group "issue75"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

apply plugin: 'com.bmuschko.clover'

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.1.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.1.Final"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    provided "org.codehaus.groovy:groovy-ant"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.11.1"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    clover 'org.openclover:clover:4.2.0'
}


assets {
    minifyJs = true
    minifyCss = true
}

clover {
//    classesBackupDir = file("${sourceSets.main.classesDir}-backup") // NOTE: dlehammer, disabled to avoid: Could not get unknown property 'classesDir' for source set 'main' of type org.gradle.api.internal.tasks.DefaultSourceSet.
//    licenseLocation = 'clover-license.txt' // NOTE: dlehammer, disabled to avoid:  File 'clover-license.txt' specified for property 'licenseFile' does not exist. Added empty dummy clover.license to ${project.rootDir} to avoid: 'clover.license' specified for property 'licenseFile' does not exist. 
    excludes = ['**/SynchronizedMultiValueMap.java']
    testExcludes = ['**/Mock*.java']

    testIncludes = ['**/Spec.groovy'] // NOTE: dlehammer, explicit declaration for Spock test inclusion

    targetPercentage = '50%'

    // Each additional source set is defined by a map
    // having a srcDirs and classesDir element.
/*    additionalSourceSets << [ // NOTE: dlehammer, disabled as this is a vanilla Grails project (and an attempt to avoid: Could not get unknown property 'classesDir' ...)
            srcDirs: sourceSets.generated.allSource.srcDirs,
            classesDir: sourceSets.generated.output.classesDir
    ]
    additionalTestSourceSets << [
            srcDirs: sourceSets.integration.allSource.srcDirs,
            classesDir: sourceSets.integration.output.classesDir
    ]

    // Closure based syntax for additionalSourceSets and
    // additionalTestSourceSets is also supported
    additionalSourceSet {
        srcDirs = sourceSets.generatedJava.allSource.srcDirs
        classesDir = sourceSets.generated.output.classesDir
    }
*/
    compiler {
        encoding = 'UTF-8'

        // if the javac executable used by ant should be the same as the one used elsewhere.
//        executable = file('/usr/local/java/jdk1.8.0_05') // NOTE: dlehammer, disabled as JDK 8 is provided via path
    }

    contexts {
        statement {
            name = 'log'
            regexp = '^.*LOG\\..*'
        }

        method {
            name = 'main'
            regexp = 'public static void main\\(String args\\[\\]\\).*'
        }
        method {
            name = 'getters'
            regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
            maxStatements = 1
        }
        method {
            name = 'setters'
            regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
            maxStatements = 1
        }
    }

    report {
        html = true
        pdf = true
        filter = 'log,main,getters,setters'
        testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
        testResultsInclude = 'TEST-*.xml'
    }
}